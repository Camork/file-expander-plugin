import org.jetbrains.changelog.Changelog

plugins {
    id 'org.jetbrains.intellij.platform' version '2.5.0'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.changelog' version '2.2.1'
}

group = 'com.github.camork'
version = '3.0'

repositories {
    intellijPlatform {
        defaultRepositories()
    }
    mavenCentral()
}

configurations.testImplementation.extendsFrom(configurations.compileOnly)
buildPlugin.dependsOn check

kotlin {
    jvmToolchain(17)
}

dependencies {
    intellijPlatform {
        intellijIdeaCommunity('2024.3')
        bundledPlugin 'com.intellij.java'
    }

    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compileOnly 'org.apache.commons:commons-compress:1.26.1'
    implementation 'io.airlift:aircompressor:0.25'

    testImplementation("org.assertj:assertj-core:3.27.2")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5:2.1.10")

    testImplementation(platform("org.junit:junit-bom:5.12.2"))
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine")
    testRuntimeOnly("org.assertj:assertj-core:3.27.2")
}

intellijPlatform {
    version = project.version

    pluginVerification {
        ides {
            recommended()
        }
    }
}

runIde {
    jvmArgs '-XX:+AllowEnhancedClassRedefinition'
}

patchPluginXml {
    sinceBuild = "223"

    changeNotes = provider {
        def content = changelog
                .getUnreleased()
                .withHeader(false)
                .withEmptySections(false)
        changelog.renderItem(content, Changelog.OutputType.HTML)
    }
}

changelog {
    groups = ["Changed", "Fixed"]
    repositoryUrl = "https://github.com/Camork/file-expander-plugin"
}

signPlugin {
    certificateChain = providers.environmentVariable("CERTIFICATE_CHAIN")
    privateKey = providers.environmentVariable("PRIVATE_KEY")
    password = providers.environmentVariable("PRIVATE_KEY_PASSWORD")
}

publishPlugin {
    token = providers.environmentVariable("PUBLISH_TOKEN")
}

test {
    useJUnitPlatform()
}
